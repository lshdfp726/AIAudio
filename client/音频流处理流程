采集音频数据 - 多级滤波(高通-低通-放大增益)- 网络传输(缓冲区大小动态调整,设置上下限大小)- 阈值降噪,信号强度越低,降的越快

- 转换符合播放器的数据格式和约定(浏览器需要32位浮点数,并且是归一化的数据) 


高通、低通滤波器和Q值

Q值决定截止频率附近的过度效果,0.707 是巴斯沃特特性的小姑,过度最为平滑
实际物理世界高通/低通滤波器 不可能做到截止频率两边绝对的 衰减和不衰减,所以才有Q值来处理截止频率附近的过度效果
高通 + 低通 = 带通, 只允许一个范围的信号通过

音乐的信号范围 20HZ ~ 20000HZ
语音的信号范围 300Hz-3400Hz

单双声道 - 位深32位, 24位左右对齐 - 移动多少位合适,需要测试


- socket
    - TCP 滑动窗口, 初始约定一个值之后,后续每次根据ack回复里面对方填的可用缓冲区大小来判断 发送端发送大小(结合拥塞窗口值)
        - ack 里面的滑动窗口值为0,发送方不再发送数据,一直等到接收方发送一个只包含更新的滑动窗口大小的窗口更新报文,这个时候发送方方会继续发送数据

    - TCP 拥塞窗口,不再协议头里面 而是发送方自己维护的一个内部窗口值大小 cwnd
        - 慢启动:初始值cwnd = 1 ~2 mss(最大报文长),每次收到一个ack,翻倍增长
        - 用塞避免:cwnd 增长到 拥塞阈值之后 ssthresh(初始值一般为 65535),cwnd 递进增长,每次收到ack增加一个mss
        - 拥塞调整:当超时未收到ack 或者连续三次以上都收到同样的ack,cwnd 和 ssthresh 重新设值
            - 超时情况: ssthresh 设置位 cwnd 的一半,并且cwnd 设置为1个mss,进入慢启动阶段
            - 三次收到相同ack: ssthresh 设置为 cwnd 一半,cwnd 设置位ssthresh 值,进入拥塞避免(这种情况网络没问题,其他因素,所以不进入慢启动)

    - UDP传输 (类似webRTC, RTP 协议)
        - 发送方法逻辑:
            - 背景:受制于MTU 限制,需要自己进行每个数据帧的分片操作,如果数据帧 > MTU
            - 原始数据帧队列缓存数据, 发送的时候从里面每一帧数据,标识每一个数据序号frameId
            - 根据帧大小 > MTU(1500 - IP/UDP头部长度 = 1472) 是否分片
            - 发送的数据缓存到一个缓存数据结构里面{rawFrame, isFragmented(是否分片标识),分片数据,缓存时间(超时清理)用}

        - 接收方逻辑:
            - 接收有序存储缓存阶段
                - 按照frameId 接收缓存帧,处理分片情况,如果未分片,直接存,分片,接收完分片组成完整帧在存 到frameCache
                - 定制策略(比如isReady 事件策略 + 定期check frameCache是否有isReady数据)将frameCache中isReady=true的帧按timestamp排序,移入readyPlayQueue。

            - 缓存播放阶段
                - 设计最小缓冲阈值(如200ms),
                - 检查是否到播放时间: 当前系统时间 ≥ 帧应播放的时间 if (getCurrentSystemTime() >= frame.timestamp + NETWORK_DELAY)

- WebRTC
    - 信令协议
        - SDP(Session Description Protocol):描述本地媒体能力(如支持的编解码器、分辨率、带宽),分为offer(发起方提议)和answer(接收方应答)。
        - ICE 候选地址:包含端点的网络地址(如本地 IP、NAT 映射后的公网 IP),用于穿透 NAT 建立 P2P 连接。
    - 网络连接协议
        - 解决 NAT 穿透问题,通过以下步骤建立连接:
            - 内网地址访问外网资源必须经过NAT 把内网地址转换为外网,在发送请求,服务器响应结果在通过NAT中转回内网,两个不同的NAT内网主机无法通信
            - 收集候选地址(host本地地址、srflx公网反射地址、relay中继地址)。
                - 锥形NAT(一般家庭路由器),直接分配固定的srflx ,所有其他外网服务器都可以访问
                - 对称NAT(部分公司的路由器),针对外部不同服务器(S)分配不同的外部srflx, S1(外部服务区器)分配srflx1, S2分配srflx2 ,S2不可以通过srflx1来访问内网主机
                    - 没有中继干预核心流程 A内网地址-> A的对称NAT -> B的对称NAT->B内网  B的对称NAT压根不鸟A的对称NAT, 所以不转发给B
                    - 对称NAT生成外网地址也是动态临时变化的,并且一个连接配置一个,而且无法手动配置,堵死了专空子添加白名单路子。

                - relay 中继地址实质就是把对称转成 "锥形NAT",内网主机不管访问什么外网服务器都先走中继服务器，然后中继服务器来访问(中继服务器理解为锥形NAT或者压根没NAT穿透问题)
                    - 核心流程， A内网地址-> A的对称NAT -> 中继服务器S -> B的对称NAT-> B内网  B的对称NAT已经把中继服务器S添加到白名单

            - 交换候选地址并按优先级排序。
            - 逐一尝试连接,选择最优路径(优先 P2P,失败则用中继)。

        - STUN(Session Traversal Utilities for NAT):
            - 辅助 ICE 获取公网 IP 和端口(通过向 STUN 服务器发送请求,由服务器返回端点的公网地址),如 Google 的公共 STUN 服务器(stun:stun.l.google.com:19302)。
        - TURN(Traversal Using Relays around NAT):
            - 当 P2P 连接失败时(如对称 NAT 场景),作为中继服务器转发媒体数据(需部署 TURN 服务器,如 Coturn)。

    - 媒体传输协议
        - RTP , 上面提到的数据分片 + 序号传输相关逻辑
        - RTCP, 上面提到的 重传部分相关逻辑

    - 媒体编码协议
        - H.264(AVC):
        - VP8/VP9
        - AV1

    - 数据传输协议
        - SCTP(Stream Control Transmission Protocol)
        - 用于RTCDataChannel传输非媒体数据,结合了 TCP 的可靠性(重传、排序)和 UDP 的实时性,支持多流传输和部分可靠性(可配置是否重传)。

- 嵌入式系统组成
    - 硬件层
    - 硬件抽象层
    - 操作系统层
    - 中间件层